// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using W4S.PostingService.Persistence;

#nullable disable

namespace W4S.PostingService.Persistence.Migrations
{
    [DbContext(typeof(PostingContext))]
    partial class PostingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Proximity")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("WorkTimeOverlap")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("OfferId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ef726d5-7d70-4cce-b185-77e3ae15f7ca"),
                            Description = "It is what it is",
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Openings")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecruiterId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Recruiters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8b254d4-2eb8-44c4-a6aa-4ddf5b16e791"),
                            CompanyId = new Guid("1ef726d5-7d70-4cce-b185-77e3ae15f7ca"),
                            Email = "noreply@company.et",
                            FirstName = "John",
                            PhoneNumber = "123456789",
                            Surname = "Smith"
                        });
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Applicant", b =>
                {
                    b.OwnsOne("W4S.PostingService.Domain.ValueType.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ApplicantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ApplicantId");

                            b1.ToTable("Applicants");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId");
                        });

                    b.OwnsMany("W4S.PostingService.Domain.Models.Schedule", "Availability", b1 =>
                        {
                            b1.Property<Guid>("ApplicantId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ApplicantId", "Id");

                            b1.ToTable("Applicants_Availability");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Application", b =>
                {
                    b.HasOne("W4S.PostingService.Domain.Entities.Applicant", "Applicant")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("W4S.PostingService.Domain.Entities.JobOffer", "Offer")
                        .WithMany("Applications")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Company", b =>
                {
                    b.OwnsOne("W4S.PostingService.Domain.ValueType.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.HasData(
                                new
                                {
                                    CompanyId = new Guid("1ef726d5-7d70-4cce-b185-77e3ae15f7ca"),
                                    Building = "Macdonald",
                                    City = "Gliwice",
                                    Country = "Poland",
                                    Region = "Silesia",
                                    Street = "Wrocławska"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.JobOffer", b =>
                {
                    b.HasOne("W4S.PostingService.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("Offers")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("W4S.PostingService.Domain.ValueType.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("JobOfferId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JobOfferId");

                            b1.ToTable("JobOffers");

                            b1.WithOwner()
                                .HasForeignKey("JobOfferId");
                        });

                    b.OwnsMany("W4S.PostingService.Domain.Models.Schedule", "WorkingHours", b1 =>
                        {
                            b1.Property<Guid>("JobOfferId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("JobOfferId", "Id");

                            b1.ToTable("JobOffers_WorkingHours");

                            b1.WithOwner()
                                .HasForeignKey("JobOfferId");
                        });

                    b.OwnsOne("W4S.PostingService.Domain.Models.PayRange", "PayRange", b1 =>
                        {
                            b1.Property<Guid>("JobOfferId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Max")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Min")
                                .HasColumnType("numeric");

                            b1.HasKey("JobOfferId");

                            b1.ToTable("JobOffers");

                            b1.WithOwner()
                                .HasForeignKey("JobOfferId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PayRange")
                        .IsRequired();

                    b.Navigation("Recruiter");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Recruiter", b =>
                {
                    b.HasOne("W4S.PostingService.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Applicant", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.JobOffer", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("W4S.PostingService.Domain.Entities.Recruiter", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
